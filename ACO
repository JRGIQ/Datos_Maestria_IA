{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOQnUfHFXcac2woYD6ebDva"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"VVZv5p48e4R1","executionInfo":{"status":"error","timestamp":1757123870098,"user_tz":300,"elapsed":130894,"user":{"displayName":"Joaqu√≠n Sanchez","userId":"10392077443514881254"}},"outputId":"ed980976-342b-41b5-986a-4c7489528c29"},"outputs":[{"output_type":"stream","name":"stdout","text":["0  Best distance:  37693.0\n","1  Best distance:  37601.0\n","2  Best distance:  37601.0\n","3  Best distance:  37601.0\n","4  Best distance:  37304.0\n","5  Best distance:  37304.0\n","6  Best distance:  37304.0\n","7  Best distance:  37304.0\n","8  Best distance:  37304.0\n","9  Best distance:  37304.0\n","10  Best distance:  37304.0\n","11  Best distance:  37304.0\n","12  Best distance:  37304.0\n","13  Best distance:  36425.0\n","14  Best distance:  36425.0\n","15  Best distance:  36425.0\n","16  Best distance:  36425.0\n","17  Best distance:  36425.0\n","18  Best distance:  36425.0\n","19  Best distance:  36425.0\n","20  Best distance:  36425.0\n","21  Best distance:  36425.0\n","22  Best distance:  36425.0\n","23  Best distance:  36425.0\n","24  Best distance:  36425.0\n","25  Best distance:  36425.0\n","26  Best distance:  36425.0\n","27  Best distance:  36425.0\n","28  Best distance:  36425.0\n","29  Best distance:  36425.0\n","30  Best distance:  36425.0\n","31  Best distance:  36425.0\n","32  Best distance:  36425.0\n","33  Best distance:  36425.0\n","34  Best distance:  36425.0\n","35  Best distance:  36425.0\n","36  Best distance:  36425.0\n","37  Best distance:  36425.0\n","38  Best distance:  36425.0\n","39  Best distance:  36425.0\n","40  Best distance:  36425.0\n","41  Best distance:  36425.0\n","42  Best distance:  36425.0\n","43  Best distance:  36425.0\n","44  Best distance:  36425.0\n","45  Best distance:  36425.0\n","46  Best distance:  36425.0\n","47  Best distance:  36425.0\n","48  Best distance:  36425.0\n","49  Best distance:  36425.0\n","50  Best distance:  36425.0\n","51  Best distance:  36425.0\n","52  Best distance:  36425.0\n","53  Best distance:  36425.0\n","54  Best distance:  36425.0\n","55  Best distance:  36425.0\n","56  Best distance:  36425.0\n","57  Best distance:  36425.0\n","58  Best distance:  36425.0\n","59  Best distance:  36425.0\n","60  Best distance:  36425.0\n","61  Best distance:  36425.0\n","62  Best distance:  36425.0\n","63  Best distance:  36425.0\n","64  Best distance:  36425.0\n","65  Best distance:  36425.0\n","66  Best distance:  36425.0\n","67  Best distance:  36425.0\n","68  Best distance:  36425.0\n","69  Best distance:  36425.0\n","70  Best distance:  36425.0\n","71  Best distance:  36425.0\n","72  Best distance:  36425.0\n","73  Best distance:  36425.0\n","74  Best distance:  36425.0\n","75  Best distance:  36425.0\n","76  Best distance:  36425.0\n","77  Best distance:  36425.0\n","78  Best distance:  36425.0\n","79  Best distance:  36425.0\n","80  Best distance:  36237.0\n","81  Best distance:  36237.0\n","82  Best distance:  36237.0\n","83  Best distance:  36237.0\n","84  Best distance:  36237.0\n","85  Best distance:  36237.0\n","86  Best distance:  36237.0\n","87  Best distance:  36237.0\n","88  Best distance:  36237.0\n","89  Best distance:  36237.0\n","90  Best distance:  36237.0\n","91  Best distance:  36237.0\n","92  Best distance:  36237.0\n","93  Best distance:  36237.0\n","94  Best distance:  36237.0\n","95  Best distance:  36237.0\n","96  Best distance:  36237.0\n","97  Best distance:  36237.0\n","98  Best distance:  36237.0\n","99  Best distance:  36237.0\n","100  Best distance:  36237.0\n","101  Best distance:  36237.0\n","102  Best distance:  36237.0\n","103  Best distance:  36237.0\n","104  Best distance:  36237.0\n","105  Best distance:  36237.0\n","106  Best distance:  36237.0\n","107  Best distance:  36237.0\n","108  Best distance:  36237.0\n","109  Best distance:  36237.0\n","110  Best distance:  36237.0\n","111  Best distance:  36237.0\n","112  Best distance:  36237.0\n","113  Best distance:  36237.0\n","114  Best distance:  36237.0\n","115  Best distance:  36237.0\n","116  Best distance:  36237.0\n","117  Best distance:  36237.0\n","118  Best distance:  36237.0\n","119  Best distance:  36237.0\n","120  Best distance:  36237.0\n","121  Best distance:  36237.0\n","122  Best distance:  36237.0\n","123  Best distance:  36237.0\n","124  Best distance:  36237.0\n","125  Best distance:  36237.0\n","126  Best distance:  36237.0\n","127  Best distance:  36237.0\n","128  Best distance:  36237.0\n","129  Best distance:  36237.0\n","130  Best distance:  36237.0\n","131  Best distance:  36237.0\n","132  Best distance:  36237.0\n","133  Best distance:  36237.0\n","134  Best distance:  36237.0\n","135  Best distance:  36237.0\n","136  Best distance:  36237.0\n","137  Best distance:  36237.0\n","138  Best distance:  36237.0\n","139  Best distance:  36237.0\n","140  Best distance:  36237.0\n","141  Best distance:  36237.0\n","142  Best distance:  36237.0\n","143  Best distance:  36237.0\n","144  Best distance:  36237.0\n","145  Best distance:  36237.0\n","146  Best distance:  36237.0\n","147  Best distance:  36237.0\n","148  Best distance:  36237.0\n","149  Best distance:  36237.0\n","150  Best distance:  36237.0\n","151  Best distance:  36237.0\n","152  Best distance:  36237.0\n","153  Best distance:  36237.0\n","154  Best distance:  36237.0\n","155  Best distance:  36237.0\n","156  Best distance:  36237.0\n","157  Best distance:  36237.0\n","158  Best distance:  36237.0\n","159  Best distance:  36237.0\n","160  Best distance:  36237.0\n","161  Best distance:  36237.0\n","162  Best distance:  36237.0\n","163  Best distance:  36237.0\n","164  Best distance:  36237.0\n","165  Best distance:  36237.0\n","166  Best distance:  36237.0\n","167  Best distance:  36237.0\n","168  Best distance:  36237.0\n","169  Best distance:  36237.0\n","170  Best distance:  36237.0\n","171  Best distance:  36237.0\n","172  Best distance:  36237.0\n","173  Best distance:  36237.0\n","174  Best distance:  36237.0\n","175  Best distance:  36237.0\n","176  Best distance:  36237.0\n","177  Best distance:  36237.0\n","178  Best distance:  36237.0\n","179  Best distance:  36237.0\n","180  Best distance:  36237.0\n","181  Best distance:  36237.0\n","182  Best distance:  36237.0\n","183  Best distance:  36237.0\n","184  Best distance:  36237.0\n","185  Best distance:  36237.0\n","186  Best distance:  36237.0\n","187  Best distance:  36237.0\n","188  Best distance:  36237.0\n","189  Best distance:  36237.0\n","190  Best distance:  36237.0\n","191  Best distance:  36237.0\n","192  Best distance:  36237.0\n","193  Best distance:  36237.0\n","194  Best distance:  36237.0\n","195  Best distance:  36237.0\n","196  Best distance:  36237.0\n","197  Best distance:  36237.0\n","198  Best distance:  36237.0\n","199  Best distance:  36237.0\n","200  Best distance:  36237.0\n","201  Best distance:  36237.0\n","202  Best distance:  36237.0\n","203  Best distance:  36237.0\n","204  Best distance:  36237.0\n","205  Best distance:  36237.0\n","206  Best distance:  36237.0\n","207  Best distance:  36237.0\n","208  Best distance:  36237.0\n","209  Best distance:  36237.0\n","210  Best distance:  36237.0\n","211  Best distance:  36237.0\n","212  Best distance:  36237.0\n","213  Best distance:  36237.0\n","214  Best distance:  36237.0\n","215  Best distance:  36237.0\n","216  Best distance:  36237.0\n","217  Best distance:  36237.0\n","218  Best distance:  36237.0\n","219  Best distance:  36237.0\n","220  Best distance:  36237.0\n","221  Best distance:  36237.0\n","222  Best distance:  36237.0\n","223  Best distance:  36237.0\n","224  Best distance:  36237.0\n","225  Best distance:  36237.0\n","226  Best distance:  36237.0\n","227  Best distance:  36237.0\n","228  Best distance:  36237.0\n","229  Best distance:  36237.0\n","230  Best distance:  36237.0\n","231  Best distance:  36237.0\n","232  Best distance:  36237.0\n","233  Best distance:  36237.0\n","234  Best distance:  36237.0\n","235  Best distance:  36237.0\n","236  Best distance:  36237.0\n","237  Best distance:  36237.0\n","238  Best distance:  36237.0\n","239  Best distance:  36237.0\n","240  Best distance:  36237.0\n","241  Best distance:  36237.0\n","242  Best distance:  36237.0\n","243  Best distance:  36237.0\n","244  Best distance:  36237.0\n","245  Best distance:  36237.0\n","246  Best distance:  36237.0\n","247  Best distance:  36237.0\n","248  Best distance:  36237.0\n","249  Best distance:  36237.0\n","250  Best distance:  36237.0\n","251  Best distance:  36237.0\n","252  Best distance:  36237.0\n","253  Best distance:  36237.0\n","254  Best distance:  36237.0\n","255  Best distance:  36237.0\n","256  Best distance:  36237.0\n","257  Best distance:  36237.0\n","258  Best distance:  36237.0\n","259  Best distance:  36237.0\n","260  Best distance:  36237.0\n","261  Best distance:  36237.0\n","262  Best distance:  36237.0\n","263  Best distance:  36237.0\n","264  Best distance:  36237.0\n","265  Best distance:  36237.0\n","266  Best distance:  36237.0\n","267  Best distance:  36237.0\n","268  Best distance:  36237.0\n","269  Best distance:  36237.0\n","270  Best distance:  36237.0\n","271  Best distance:  36237.0\n","272  Best distance:  36237.0\n","273  Best distance:  36237.0\n","274  Best distance:  36237.0\n","275  Best distance:  36237.0\n","276  Best distance:  36237.0\n","277  Best distance:  36237.0\n","278  Best distance:  36237.0\n","279  Best distance:  36237.0\n","280  Best distance:  36237.0\n","281  Best distance:  36237.0\n","282  Best distance:  36237.0\n","283  Best distance:  36237.0\n","284  Best distance:  36237.0\n","285  Best distance:  36237.0\n","286  Best distance:  36237.0\n","287  Best distance:  36237.0\n","288  Best distance:  36237.0\n","289  Best distance:  36237.0\n","290  Best distance:  36237.0\n","291  Best distance:  36237.0\n","292  Best distance:  36237.0\n","293  Best distance:  36237.0\n","294  Best distance:  36237.0\n","295  Best distance:  36237.0\n","296  Best distance:  36237.0\n","297  Best distance:  36237.0\n","298  Best distance:  36237.0\n","299  Best distance:  36237.0\n","300  Best distance:  36237.0\n","301  Best distance:  36237.0\n","302  Best distance:  36237.0\n","303  Best distance:  36237.0\n","304  Best distance:  36237.0\n","305  Best distance:  36237.0\n","306  Best distance:  36237.0\n","307  Best distance:  36237.0\n","308  Best distance:  36237.0\n","309  Best distance:  36237.0\n","310  Best distance:  36237.0\n","311  Best distance:  36237.0\n","312  Best distance:  36237.0\n","313  Best distance:  36237.0\n","314  Best distance:  36237.0\n","315  Best distance:  36237.0\n","316  Best distance:  36237.0\n","317  Best distance:  36237.0\n","318  Best distance:  36237.0\n","319  Best distance:  36237.0\n","320  Best distance:  36237.0\n","321  Best distance:  36237.0\n","322  Best distance:  36237.0\n","323  Best distance:  36237.0\n","324  Best distance:  36237.0\n","325  Best distance:  36237.0\n","326  Best distance:  36237.0\n","327  Best distance:  36237.0\n","328  Best distance:  36237.0\n","329  Best distance:  36237.0\n","330  Best distance:  36237.0\n","331  Best distance:  36237.0\n","332  Best distance:  36237.0\n","333  Best distance:  36237.0\n","334  Best distance:  36237.0\n","335  Best distance:  36237.0\n","336  Best distance:  36237.0\n","337  Best distance:  36237.0\n","338  Best distance:  36237.0\n","339  Best distance:  36237.0\n","340  Best distance:  36237.0\n","341  Best distance:  36237.0\n","342  Best distance:  36237.0\n","343  Best distance:  36237.0\n","344  Best distance:  36237.0\n","345  Best distance:  36237.0\n","346  Best distance:  36237.0\n","347  Best distance:  36237.0\n","348  Best distance:  36237.0\n","349  Best distance:  36237.0\n","350  Best distance:  36237.0\n","351  Best distance:  36237.0\n","352  Best distance:  36237.0\n","353  Best distance:  36237.0\n","354  Best distance:  36237.0\n","355  Best distance:  36237.0\n","356  Best distance:  36237.0\n","357  Best distance:  36237.0\n","358  Best distance:  36237.0\n","359  Best distance:  36237.0\n","360  Best distance:  36237.0\n","361  Best distance:  36237.0\n","362  Best distance:  36237.0\n","363  Best distance:  36237.0\n","364  Best distance:  36237.0\n","365  Best distance:  36237.0\n","366  Best distance:  36237.0\n","367  Best distance:  36237.0\n","368  Best distance:  36237.0\n","369  Best distance:  36237.0\n","370  Best distance:  36237.0\n","371  Best distance:  36237.0\n","372  Best distance:  36237.0\n","373  Best distance:  36237.0\n","374  Best distance:  36237.0\n","375  Best distance:  36237.0\n","376  Best distance:  36237.0\n","377  Best distance:  36237.0\n","378  Best distance:  36237.0\n","379  Best distance:  36237.0\n","380  Best distance:  36237.0\n","381  Best distance:  36237.0\n","382  Best distance:  36237.0\n","383  Best distance:  36237.0\n","384  Best distance:  36237.0\n","385  Best distance:  36237.0\n","386  Best distance:  36237.0\n","387  Best distance:  36237.0\n","388  Best distance:  36237.0\n","389  Best distance:  36237.0\n","390  Best distance:  36237.0\n","391  Best distance:  36237.0\n","392  Best distance:  36237.0\n","393  Best distance:  36237.0\n","394  Best distance:  36237.0\n","395  Best distance:  36237.0\n","396  Best distance:  36237.0\n","397  Best distance:  36237.0\n","398  Best distance:  36237.0\n","399  Best distance:  36237.0\n","400  Best distance:  36237.0\n","401  Best distance:  36237.0\n","402  Best distance:  36237.0\n","403  Best distance:  36237.0\n","404  Best distance:  36237.0\n","405  Best distance:  36237.0\n","406  Best distance:  36237.0\n","407  Best distance:  36237.0\n","408  Best distance:  36237.0\n","409  Best distance:  36237.0\n","410  Best distance:  36237.0\n","411  Best distance:  36237.0\n","412  Best distance:  36237.0\n","413  Best distance:  36237.0\n","414  Best distance:  36237.0\n","415  Best distance:  36237.0\n","416  Best distance:  36237.0\n","417  Best distance:  36237.0\n","418  Best distance:  36237.0\n","419  Best distance:  36237.0\n","420  Best distance:  36237.0\n","421  Best distance:  36237.0\n","422  Best distance:  36237.0\n","423  Best distance:  36237.0\n","424  Best distance:  36237.0\n","425  Best distance:  36237.0\n","426  Best distance:  36237.0\n","427  Best distance:  36237.0\n","428  Best distance:  36237.0\n","429  Best distance:  36237.0\n","430  Best distance:  36237.0\n","431  Best distance:  36237.0\n","432  Best distance:  36237.0\n","433  Best distance:  36237.0\n","434  Best distance:  36237.0\n","435  Best distance:  36237.0\n","436  Best distance:  36237.0\n","437  Best distance:  36237.0\n","438  Best distance:  36237.0\n","439  Best distance:  36237.0\n","440  Best distance:  36237.0\n","441  Best distance:  36237.0\n","442  Best distance:  36237.0\n","443  Best distance:  36237.0\n","444  Best distance:  36237.0\n","445  Best distance:  36237.0\n","446  Best distance:  35999.0\n","447  Best distance:  35999.0\n","448  Best distance:  35999.0\n","449  Best distance:  35999.0\n","450  Best distance:  35999.0\n","451  Best distance:  35999.0\n","452  Best distance:  35999.0\n","453  Best distance:  35999.0\n","454  Best distance:  35999.0\n","455  Best distance:  35999.0\n","456  Best distance:  35999.0\n","457  Best distance:  35999.0\n","458  Best distance:  35999.0\n","459  Best distance:  35999.0\n","460  Best distance:  35999.0\n","461  Best distance:  35999.0\n","462  Best distance:  35999.0\n","463  Best distance:  35999.0\n","464  Best distance:  35999.0\n","465  Best distance:  35999.0\n","466  Best distance:  35999.0\n","467  Best distance:  35999.0\n","468  Best distance:  35999.0\n","469  Best distance:  35999.0\n","470  Best distance:  35999.0\n","471  Best distance:  35999.0\n","472  Best distance:  35999.0\n","473  Best distance:  35999.0\n","474  Best distance:  35999.0\n","475  Best distance:  35999.0\n","476  Best distance:  35999.0\n","477  Best distance:  35999.0\n","478  Best distance:  35999.0\n","479  Best distance:  35999.0\n","480  Best distance:  35999.0\n","481  Best distance:  35999.0\n","482  Best distance:  35999.0\n","483  Best distance:  35999.0\n","484  Best distance:  35999.0\n","485  Best distance:  35999.0\n","486  Best distance:  35999.0\n","487  Best distance:  35999.0\n","488  Best distance:  35999.0\n","489  Best distance:  35999.0\n","490  Best distance:  35999.0\n","491  Best distance:  35999.0\n","492  Best distance:  35999.0\n","493  Best distance:  35999.0\n","494  Best distance:  35999.0\n","495  Best distance:  35999.0\n","496  Best distance:  35999.0\n","497  Best distance:  35999.0\n","498  Best distance:  35999.0\n","499  Best distance:  35999.0\n","500  Best distance:  35999.0\n","501  Best distance:  35999.0\n","502  Best distance:  35999.0\n","503  Best distance:  35999.0\n","504  Best distance:  35999.0\n","505  Best distance:  35999.0\n","506  Best distance:  35999.0\n","507  Best distance:  35999.0\n","508  Best distance:  35999.0\n","509  Best distance:  35999.0\n","510  Best distance:  35999.0\n","511  Best distance:  35999.0\n","512  Best distance:  35999.0\n","513  Best distance:  35999.0\n","514  Best distance:  35999.0\n","515  Best distance:  35999.0\n","516  Best distance:  35999.0\n","517  Best distance:  35999.0\n","518  Best distance:  35999.0\n","519  Best distance:  35999.0\n","520  Best distance:  35999.0\n","521  Best distance:  35999.0\n","522  Best distance:  35999.0\n","523  Best distance:  35999.0\n","524  Best distance:  35999.0\n","525  Best distance:  35999.0\n","526  Best distance:  35999.0\n","527  Best distance:  35999.0\n","528  Best distance:  35999.0\n","529  Best distance:  35999.0\n","530  Best distance:  35999.0\n","531  Best distance:  35999.0\n","532  Best distance:  35999.0\n","533  Best distance:  35999.0\n","534  Best distance:  35999.0\n","535  Best distance:  35999.0\n","536  Best distance:  35999.0\n","537  Best distance:  35999.0\n","538  Best distance:  35999.0\n","539  Best distance:  35999.0\n","540  Best distance:  35999.0\n","541  Best distance:  35999.0\n","542  Best distance:  35999.0\n","543  Best distance:  35999.0\n","544  Best distance:  35999.0\n","545  Best distance:  35999.0\n","546  Best distance:  35999.0\n","547  Best distance:  35999.0\n","548  Best distance:  35999.0\n","549  Best distance:  35999.0\n","550  Best distance:  35999.0\n","551  Best distance:  35999.0\n","552  Best distance:  35999.0\n","553  Best distance:  35999.0\n","554  Best distance:  35999.0\n","555  Best distance:  35999.0\n","556  Best distance:  35999.0\n","557  Best distance:  35999.0\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-3119163443.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    190\u001b[0m \u001b[0mEVAPORATION_RATE\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m \u001b[0maco\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mACO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNUMBER_OF_ANTS_FACTOR\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 192\u001b[0;31m \u001b[0maco\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mTOTAL_ITERATIONS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mEVAPORATION_RATE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/tmp/ipython-input-3119163443.py\u001b[0m in \u001b[0;36msolve\u001b[0;34m(self, total_iterations, evaporation_rate)\u001b[0m\n\u001b[1;32m    178\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mATTRACTION_COUNT\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmove_ants\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mant_colony\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_pheromones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaporation_rate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_ant\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_best\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mant_colony\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m' Best distance: '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_ant\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_distance_travelled\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipython-input-3119163443.py\u001b[0m in \u001b[0;36mupdate_pheromones\u001b[0;34m(self, evaporation_rate)\u001b[0m\n\u001b[1;32m    169\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpheromone_trails\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpheromone_trails\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mevaporation_rate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mant\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mant_colony\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 171\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpheromone_trails\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mant\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_distance_travelled\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    172\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m     \u001b[0;31m# Tie everything together - this is the main loop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["import csv\n","import random\n","import math\n","\n","# Ant Colony Optimization (ACO)\n","# The Ant Colony Optimization algorithm is inspired by the behavior of ants moving between destinations, dropping\n","# pheromones and acting on pheromones that they come across. The emergent behavior is ants converging to paths of\n","# least resistance.\n","\n","# Set the number of attractions in the data set\n","# Best total distance for 5 attractions: 19\n","# Best total distance for 48 attractions: 33523\n","ATTRACTION_COUNT = 48\n","# Initialize the 2D matrix for storing distances between attractions\n","attraction_distances = []\n","# Read attraction distance data set store it in matrix\n","with open('attractions-' + str(ATTRACTION_COUNT) + '.csv') as file:\n","    reader = csv.reader(file, quoting=csv.QUOTE_NONNUMERIC)\n","    for row in reader:\n","        attraction_distances.append(row)\n","\n","# Set the probability of ants choosing a random attraction to visit (0.0 - 1.0)\n","RANDOM_ATTRACTION_FACTOR = 0.0\n","# Set the weight for pheromones on path for selection\n","ALPHA = 4\n","# Set the weight for heuristic of path for selection\n","BETA = 7\n","\n","\n","# The Ant class encompasses the idea of an ant in the ACO algorithm.\n","# Ants will move to different attractions and leave pheromones behind. Ants will also make a judgement about which\n","# attraction to visit next. And lastly, ants will have knowledge about their respective total distance travelled.\n","# - Memory: In the ACO algorithm, this is the list of attractions already visited.\n","# - Best fitness: The shortest total distance travelled across all attractions.\n","# - Action: Choose the next destination to visit and drop pheromones along the way.\n","class Ant:\n","\n","    # The ant is initialized to a random attraction with no previously visited attractions\n","    def __init__(self):\n","        self.visited_attractions = []\n","        self.visited_attractions.append(random.randint(0, ATTRACTION_COUNT - 1))\n","\n","    # Select an attraction using a random chance or ACO function\n","    def visit_attraction(self, pheromone_trails):\n","        if random.random() < RANDOM_ATTRACTION_FACTOR:\n","            self.visited_attractions.append(self.visit_random_attraction())\n","        else:\n","            self.visited_attractions.append(\n","                self.roulette_wheel_selection(self.visit_probabilistic_attraction(pheromone_trails)))\n","\n","    # Select an attraction using a random chance\n","    def visit_random_attraction(self):\n","        all_attractions = set(range(0, ATTRACTION_COUNT))\n","        possible_attractions = all_attractions - set(self.visited_attractions)\n","        return random.randint(0, len(possible_attractions) - 1)\n","\n","    # Calculate probabilities of visiting adjacent unvisited attractions\n","    def visit_probabilistic_attraction(self, pheromone_trails):\n","        current_attraction = self.visited_attractions[-1]\n","        all_attractions = set(range(0, ATTRACTION_COUNT))\n","        possible_attractions = all_attractions - set(self.visited_attractions)\n","        possible_indexes = []\n","        possible_probabilities = []\n","        total_probabilities = 0\n","        for attraction in possible_attractions:\n","            possible_indexes.append(attraction)\n","            pheromones_on_path = math.pow(pheromone_trails[current_attraction][attraction], ALPHA)\n","            heuristic_for_path = math.pow(1 / attraction_distances[current_attraction][attraction], BETA)\n","            probability = pheromones_on_path * heuristic_for_path\n","            possible_probabilities.append(probability)\n","            total_probabilities += probability\n","        possible_probabilities = [probability / total_probabilities for probability in possible_probabilities]\n","        return [possible_indexes, possible_probabilities, len(possible_attractions)]\n","\n","    # Select an attraction using the probabilities of visiting adjacent unvisited attractions\n","    @staticmethod\n","    def roulette_wheel_selection(probabilities):\n","        slices = []\n","        total = 0\n","        possible_indexes = probabilities[0]\n","        possible_probabilities = probabilities[1]\n","        possible_attractions_count = probabilities[2]\n","        for i in range(0, possible_attractions_count):\n","            slices.append([possible_indexes[i], total, total + possible_probabilities[i]])\n","            total += possible_probabilities[i]\n","        spin = random.random()\n","        result = [s[0] for s in slices if s[1] < spin <= s[2]]\n","        return result[0]\n","\n","    # Get the total distance travelled by this ant\n","    def get_distance_travelled(self):\n","        total_distance = 0\n","        for a in range(1, len(self.visited_attractions)):\n","            total_distance += attraction_distances[self.visited_attractions[a]][self.visited_attractions[a-1]]\n","        total_distance += attraction_distances[self.visited_attractions[0]][self.visited_attractions[len(self.visited_attractions) - 1]]\n","        return total_distance\n","\n","    def print_info(self):\n","        print('Ant ', self.__hash__())\n","        print('Total attractions: ', len(self.visited_attractions))\n","        print('Total distance: ', self.get_distance_travelled())\n","\n","\n","# The ACO class encompasses the functions for the ACO algorithm consisting of many ants and attractions to visit\n","# The general lifecycle of an ant colony optimization algorithm is as follows:\n","\n","# - Initialize the pheromone trails: This involves creating the concept of pheromone trails between attractions\n","# and initializing their intensity values.\n","\n","# - Setup the population of ants: This involves creating a population of ants where each ant starts at a different\n","# attraction.\n","\n","# - Choose the next visit for each ant: This involves choosing the next attraction to visit for each ant. This will\n","# happen until each ant has visited all attractions exactly once.\n","\n","# - Update the pheromone trails: This involves updating the intensity of pheromone trails based on the ants‚Äô movements\n","# on them as well as factoring in evaporation of pheromones.\n","\n","# - Update the best solution: This involves updating the best solution given the total distance covered by each ant.\n","\n","# - Determine stopping criteria: The process of ants visiting attractions repeats for a number of iterations. One\n","# iteration is every ant visiting all attractions exactly once. The stopping criteria determines the total number of\n","# iterations to run. More iterations will allow ants to make better decisions based on the pheromone trails.\n","class ACO:\n","\n","    def __init__(self, number_of_ants_factor):\n","        self.number_of_ants_factor = number_of_ants_factor\n","        # Initialize the array for storing ants\n","        self.ant_colony = []\n","        # Initialize the 2D matrix for pheromone trails\n","        self.pheromone_trails = []\n","        # Initialize the best distance in swarm\n","        self.best_distance = math.inf\n","        self.best_ant = None\n","\n","    # Initialize ants at random starting locations\n","    def setup_ants(self, number_of_ants_factor):\n","        number_of_ants = round(ATTRACTION_COUNT * number_of_ants_factor)\n","        self.ant_colony.clear()\n","        for i in range(0, number_of_ants):\n","            self.ant_colony.append(Ant())\n","\n","    # Initialize pheromone trails between attractions\n","    def setup_pheromones(self):\n","        for r in range(0, len(attraction_distances)):\n","            pheromone_list = []\n","            for i in range(0, len(attraction_distances)):\n","                pheromone_list.append(1)\n","            self.pheromone_trails.append(pheromone_list)\n","\n","    # Move all ants to a new attraction\n","    def move_ants(self, ant_population):\n","        for ant in ant_population:\n","            ant.visit_attraction(self.pheromone_trails)\n","\n","    # Determine the best ant in the colony - after one tour of all attractions\n","    def get_best(self, ant_population):\n","        for ant in ant_population:\n","            distance_travelled = ant.get_distance_travelled()\n","            if distance_travelled < self.best_distance:\n","                self.best_distance = distance_travelled\n","                self.best_ant = ant\n","        return self.best_ant\n","\n","    # Update pheromone trails based ant movements - after one tour of all attractions\n","    def update_pheromones(self, evaporation_rate):\n","        for x in range(0, ATTRACTION_COUNT):\n","            for y in range(0, ATTRACTION_COUNT):\n","                self.pheromone_trails[x][y] = self.pheromone_trails[x][y] * evaporation_rate\n","                for ant in self.ant_colony:\n","                    self.pheromone_trails[x][y] += 1 / ant.get_distance_travelled()\n","\n","    # Tie everything together - this is the main loop\n","    def solve(self, total_iterations, evaporation_rate):\n","        self.setup_pheromones()\n","        for i in range(0, TOTAL_ITERATIONS):\n","            self.setup_ants(NUMBER_OF_ANTS_FACTOR)\n","            for r in range(0, ATTRACTION_COUNT - 1):\n","                self.move_ants(self.ant_colony)\n","            self.update_pheromones(evaporation_rate)\n","            self.best_ant = self.get_best(self.ant_colony)\n","            print(i, ' Best distance: ', self.best_ant.get_distance_travelled())\n","\n","\n","# Set the percentage of ants based on the total number of attractions\n","NUMBER_OF_ANTS_FACTOR = 0.5\n","# Set the number of tours ants must complete\n","TOTAL_ITERATIONS = 10000\n","# Set the rate of pheromone evaporation (0.0 - 1.0)\n","EVAPORATION_RATE = 0.4\n","aco = ACO(NUMBER_OF_ANTS_FACTOR)\n","aco.solve(TOTAL_ITERATIONS, EVAPORATION_RATE)"]}]}
